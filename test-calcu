import calcu
import unittest
class TestCalculator(unittest.TestCase):
    def test_Add(self):
        self.assertEqual(
            calcu.add(1,1),2)
        with self.assertRaises(TypeError):
            calcu.add('1',1)

    def test_Sub(self):
        self.assertEqual(
            calcu.sub(1,1),0)

    def test_Multi(self):
        self.assertEqual(
            calcu.multi(1,1),1)

    def test_Divi(self):
##        self.assertEqual(
##            calcu.divi(10,0),0)
        with self.assertRaises(ZeroDivisionError):
            calcu.divi(10,0)

##    def test_operator(self):
##        self.assertEqual(calcu.operator('+',13,11),24)
##        self.assertEqual(calcu.operator('-',15,-10),25)
##        self.assertEqual(calcu.operator('*',7,-3),-21)
##        self.assertEqual(calcu.operator('/',16,2),8)
##        self.assertEqual(calcu.operator(1,'AB',2),None)

    def test_output(self):
        self.assertEqual(calcu.output('+',1,3,4),"1 + 3 = 4")

    def test_ope(self):
        self.assertEqual(calcu.inputope(self.mock_ope), '+')

    def test_input1(self):
        self.assertEqual(calcu.input1(self.mock_input), 1)

    def test_input2(self):
        self.assertEqual(calcu.input2(self.mock_input), 1)


    def test_success(self):
         a = calcu.input1(self.mock_input)
         ope = calcu.inputope(self.mock_ope)
         b = calcu.input2(self.mock_input)
         ans = calcu.operator(ope, a, b)
         final = calcu.output(ope, a, b, ans)

         self.assertEqual(final, "1 + 1 = 2")

          
    def mock_ope(self, prompt):
        return '+'

    
    def mock_input(self, prompt):
        return 1

                         
        
        
    
      

if __name__ == "__main__":
    unittest.main()
